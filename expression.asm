;EXPRESSION CALCULATION
;ZJR 12.9
   
INCLUDE EMU8086.INC
.MODEL SMALL
.STACK 1024

.DATA 
BUFFER DB 255,0,255 DUP(0)
NUMSTACK DB 256 DUP(0)
SYMSTACK DB 256 DUP(0)
LEVEL DB 0 
STATUS DB 0
NEGSTATUS DB 1
TEN DB 10

.CODE

START:

INPUT:
    MOV AX,@data
    MOV DS,AX
    XOR AX,AX 
    MOV DX,OFFSET BUFFER
    MOV AH,10
    INT 21H

;JUDGE IF IT'S LPAREN OR NUMBER
READSTART:
    MOV AL,10
    MOV TEN,AL
    CALL SETNEGSTATUS
    
    LEA DI,SYMSTACK     ;SET OFFSET
    LEA SI,BUFFER 
    
    XOR AX,AX
    MOV AL,PTR SI+2
    ADD SI,3
    CMP AL,'0'        
    JGE READNUM
    JMP READSYM  
    


;READ A NUMBER UNTIL MEET '(' OR '+' OR '-'   
READNUM:
    XOR BX,BX
    MOV BL,AL
    SUB BL,30H          ;PUSH THIS NUMBER INTO STACK
    PUSH BX
       
    MOV AL,[SI]         ;READ NEXT SYM
    ADD SI,1
    CMP AL,'0'
    JGE RLOOP           ;IS NUM
    JL  HANDLENEG       ;IS OTHER SYMBOL,BUT WE SHOULD KNOW 
                        ;WHETHER WE NEED TO SET NEG FOR NUM
    

;DON'T FORGET HANDLENEG
RLOOP:
    SUB AL,30H
    XOR BX,BX
    MOV BL,AL 
    POP AX
    MUL TEN
    ADD AX,BX
    PUSH AX
    
    MOV AL,[SI]         ;READ NEXT SYM
    ADD SI,1
    CMP AL,'0'
    JGE RLOOP           ;IS NUM
    JL  HANDLENEG       ;IS OTHER SYMBOL,BUT WE SHOULD KNOW 
                        ;WHETHER WE NEED TO SET NEG FOR NUM


HANDLENEG:
    MOV BL,2
    CMP BL,NEGSTATUS
    JZ SETNEG
    MOV BL,0            ;SET NEGSTATUS TO BE 0
    MOV NEGSTATUS,BL
    JMP READSYM         ;IS OTHER SYMBOL         

;SET STACK TOP TO BE NEG    
SETNEG:
    POP BX
    NEG BX
    PUSH BX
    MOV BL,0            ;SET NEGSTATUS TO BE 0
    MOV NEGSTATUS,BL
    JMP READSYM
        

READSYM:
    CMP AL,'-'
    JZ RSLASH    
    CMP AL,'+'
    JZ RADD
    CMP AL,'('
    JZ RLPAREN
    CMP AL,')'
    JZ RPAREN
    ;ELSE -> END
    JMP ENDOFEXPR 

;'+' IF STATUS==1 -> CALCULATE
;AND SET NEGSTATUS TO BE 1  
RADD:
    MOV BL,0
    CMP BL,STATUS
    JZ SETSTATUS    ;IF STATUS==0 -> PUSH SYMBOL INTO STACK,BUT DON'T CALCULATE
    
    MOV DL,AL       ;STORE SYMBOL
    SUB DI,1        ;GET A SYMBOL
    MOV AL,[DI]     
    MOV [DI],DL
    ADD DI,1
    CALL CALCULATE
    
    CALL SETNEGSTATUS
    MOV AL,[SI]
    ADD SI,1
    CMP AL,'0'
    JGE READNUM
    JMP READSYM
    
    
;CALCULATE   NUMSTACK[NTOP] 'SYMSTACK[STOP]' NUMSTACK[NTOP-1] -> NUMSTACK[NTOP-1] ;NTOP--;STOP--;
CALCULATE:
    CMP AL,'+'         ;IS '+'
    JZ CADD
                    ;ELSE , IS '-'
    POP DX          ;FLAGS OF FUNCTION
    POP BX
    POP AX
    SUB  AX,BX
    PUSH AX
    PUSH DX 
    RET 

CADD:
    POP DX
    POP BX
    POP AX
    ADD AX,BX
    PUSH AX
    PUSH DX
    RET
        
;NEGSTATUS -> 1
SETNEGSTATUS:
    MOV BL,1
    MOV NEGSTATUS,BL
    RET
    
;PUSH SYMBOL INTO STACK AND SETSTATUS  STATUS 0->1
SETSTATUS:
   MOV [DI],AL
   ADD DI,1
   MOV AL,1
   MOV STATUS,AL
   
   CALL SETNEGSTATUS
   MOV AL,[SI]
   ADD SI,1
   CMP AL,'0'
   JGE READNUM
   JMP READSYM 

; MEET A '-'
RSLASH:
    MOV BL,0
    CMP BL,NEGSTATUS
    JZ  RSUB        ;NEGSTATUS==0 -> IS A SLASH  
    ;ELSE IS A NEG SYM
    
    MOV BL,2         ;NEGSTATUS -> 2
    MOV NEGSTATUS,BL
    
    MOV AL,[SI]
    ADD SI,1
    CMP AL,'0'
    JGE READNUM      ;IS A NUM? -> READNUM
    JMP RLPAREN      ;ELSE -> IT'S AN LPAREN 
    
 
;SIMILAR TO ADD
RSUB: 
    MOV BL,0
    CMP BL,STATUS
    JZ SETSTATUS    ;IF STATUS==0 -> PUSH SYMBOL INTO STACK,BUT DON'T CALCULATE
    
    MOV DL,AL       ;STORE SYMBOL
    SUB DI,1        ;GET A SYMBOL
    MOV AL,[DI]     
    MOV [DI],DL
    ADD DI,1
    CALL CALCULATE 
    CALL SETNEGSTATUS    ;NEGSTATUS -> 1
    
    MOV AL,[SI]
    ADD SI,1
    CMP AL,'0'
    JGE READNUM
    JMP READSYM
    
 
;MEET A LSPAREN '(' 
RLPAREN:  
    ;PUSH STATUS AND NEGSTATUS
    MOV AL,STATUS
    MOV AH,NEGSTATUS
    PUSH AX
    
    ;RESET STATUS AND NEGSTATUS
    MOV AL,0
    MOV STATUS,AL
    CALL SETNEGSTATUS
    
    ;IF NUM -> READNUM
    MOV AL,[SI]
    ADD SI,1
    CMP AL,'0'
    JGE READNUM
    ;ELSE
    JMP READSYM 
    

;MEET A ')' 
;DON'T FORGET TO HANDLE NEG
RPAREN:
    SUB DI,1        ;GET A SYMBOL
    MOV AL,[DI]
    CALL CALCULATE
    
    ;SET STATUS AND NEGSTATUS
    POP AX      ;NUM
    POP BX      ;STATUSES
    MOV STATUS,BL
    MOV NEGSTATUS,BH
    PUSH AX
    
    MOV AL,[SI]         ;READ NEXT SYM
    ADD SI,1
    JMP HANDLENEG

;END-> CALCULATE FOR THE LAST TIME        
ENDOFEXPR:
    SUB DI,1        ;GET A SYMBOL
    MOV AL,[DI]
    CALL CALCULATE
    JMP PRINTRESULT

;PRINT RESULT OF CALCULATION
PRINTRESULT:
    MOV AH,02H
    MOV DL,61
    INT 21H
    POP AX
    CALL PRINT_NUM
    JMP LEAVE
    
;END OF PROGRAM    
LEAVE:
    MOV AH,4CH
    INT 21H
    DEFINE_PRINT_NUM_UNS
    DEFINE_PRINT_NUM    